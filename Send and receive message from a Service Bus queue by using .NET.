# Send and Receive Messages from a Service Bus Queue using .NET

## Objective:
Create a Service Bus namespace and queue, and develop a .NET console application to send and receive messages from the queue.

## Why does this matter?
- Provides hands-on experience with Azure Service Bus.
- Demonstrates the use of the Azure CLI for managing messaging resources.
- Helps understand how to send and receive messages programmatically in .NET applications.

## Use Cases:
- Implementing reliable message queuing for distributed applications.
- Learning the process of managing messaging services using the Azure CLI.
- Developing message-based communication between different components of a system.
- Automating messaging workflows in .NET applications.

## Steps to Completion:

### 1. Sign in to Azure
In this section, you open your terminal and create some variables used throughout the rest of the exercise to make command entry and unique resource name creation a bit easier.

- Launched the Azure Cloud Shell and selected Bash and the environment.
- Created variables used in the Azure CLI commands. Replaced `<myLocation>` with a region near you:

  ```bash
  myLocation=<myLocation>
  myNameSpaceName=az204svcbus$RANDOM
  ```

### 2. Create Azure Resources
- Created a resource group to hold the Azure resources:

  ```bash
  az group create --name az204-svcbus-rg --location $myLocation
  ```

- Created a Service Bus messaging namespace. This operation took a few minutes to complete:

  ```bash
  az servicebus namespace create \
      --resource-group az204-svcbus-rg \
      --name $myNameSpaceName \
      --location $myLocation
  ```

- Created a Service Bus queue:

  ```bash
  az servicebus queue create --resource-group az204-svcbus-rg \
      --namespace-name $myNameSpaceName \
      --name az204-queue
  ```

### 3. Retrieve the Connection String for the Service Bus Namespace
- Opened the Azure portal and navigated to the `az204-svcbus-rg` resource group.
- Selected the `az204svcbus` resource created.
- Selected **Shared access policies** in the Settings section, then selected the **RootManageSharedAccessKey** policy.
- Copied the **Primary Connection String** and saved it to a file for later use.

### 4. Create Console App to Send Messages to the Queue
- Opened a local terminal, created a directory named `az204svcbus`, and then launched Visual Studio Code:

  ```bash
  code .
  ```

- Opened the terminal in Visual Studio Code and ran the following commands to create the console app and add the `Azure.Messaging.ServiceBus` package:

  ```bash
  dotnet new console
  dotnet add package Azure.Messaging.ServiceBus
  ```

- In `Program.cs`, added the following using statements at the top of the file:

  ```csharp
  using Azure.Messaging.ServiceBus;
  ```

- Added the following variables to the code and set the `connectionString` variable to the connection string obtained earlier:

  ```csharp
  // connection string to your Service Bus namespace
  string connectionString = "<CONNECTION STRING>";

  // name of your Service Bus queue
  string queueName = "az204-queue";
  ```

- Added the following code below the variables:

  ```csharp
  // the client that owns the connection and can be used to create senders and receivers
  ServiceBusClient client;

  // the sender used to publish messages to the queue
  ServiceBusSender sender;

  // Create the clients that we'll use for sending and processing messages.
  client = new ServiceBusClient(connectionString);
  sender = client.CreateSender(queueName);

  // create a batch 
  using ServiceBusMessageBatch messageBatch = await sender.CreateMessageBatchAsync();

  for (int i = 1; i <= 3; i++)
  {
      // try adding a message to the batch
      if (!messageBatch.TryAddMessage(new ServiceBusMessage($"Message {i}")))
      {
          // if an exception occurs
          throw new Exception($"Exception {i} has occurred.");
      }
  }

  try
  {
      // Use the producer client to send the batch of messages to the Service Bus queue
      await sender.SendMessagesAsync(messageBatch);
      Console.WriteLine($"A batch of three messages has been published to the queue.");
  }
  finally
  {
      // Calling DisposeAsync on client types is required to ensure that network
      // resources and other unmanaged objects are properly cleaned up.
      await sender.DisposeAsync();
      await client.DisposeAsync();
  }

  Console.WriteLine("Follow the directions in the exercise to review the results in the Azure portal.");
  Console.WriteLine("Press any key to continue");
  Console.ReadKey();
  ```

- Saved the file and ran the `dotnet build` command to ensure there were no errors.
- Ran the program using the `dotnet run` command and waited for the following confirmation message, then pressed any key to exit the program:

  ```
  A batch of three messages has been published to the queue.
  ```

### 5. Review Results
- Signed in to the Azure portal and navigated to the Service Bus namespace.
- Selected **Queues** from the Entities section of the navigation pane, then selected the `az204-queue` from the list.
- Selected **Service Bus Explorer** in the Service Bus Queue navigation pane.
- Selected **Peek from start** and the three messages that were sent appeared.

### 6. Update Project to Receive Messages from the Queue
In this section, I updated the program to receive messages from the queue.

- Added the following code at the end of the existing code:

  ```csharp
  ServiceBusProcessor processor;
  client = new ServiceBusClient(connectionString);

  // create a processor that we can use to process the messages
  processor = client.CreateProcessor(queueName, new ServiceBusProcessorOptions());

  try
  {
      // add handler to process messages
      processor.ProcessMessageAsync += MessageHandler;

      // add handler to process any errors
      processor.ProcessErrorAsync += ErrorHandler;

      // start processing 
      await processor.StartProcessingAsync();

      Console.WriteLine("Wait for a minute and then press any key to end the processing");
      Console.ReadKey();

      // stop processing 
      Console.WriteLine("\nStopping the receiver...");
      await processor.StopProcessingAsync();
      Console.WriteLine("Stopped receiving messages");
  }
  finally
  {
      // Calling DisposeAsync on client types is required to ensure that network
      // resources and other unmanaged objects are properly cleaned up.
      await processor.DisposeAsync();
      await client.DisposeAsync();
  }

  // handle received messages
  async Task MessageHandler(ProcessMessageEventArgs args)
  {
      string body = args.Message.Body.ToString();
      Console.WriteLine($"Received: {body}");

      // complete the message. messages is deleted from the queue. 
      await args.CompleteMessageAsync(args.Message);
  }

  // handle any errors when receiving messages
  Task ErrorHandler(ProcessErrorEventArgs args)
  {
      Console.WriteLine(args.Exception.ToString());
      return Task.CompletedTask;
  }
  ```

- Used the `dotnet build` command to ensure there were no errors.
- Used the `dotnet run` command to run the application. It sent three more messages to the queue and then retrieved all six messages. Pressed any key to stop the receiver and the application:

  ```
  Wait for a minute and then press any key to end the processing
  Received: Message 1
  Received: Message 2
  Received: Message 3
  Received: Message 1
  Received: Message 2
  Received: Message 3

  Stopping the receiver...
  Stopped receiving messages
  ```

  > Note: Since the application sent two batches of messages before retrieving them, you should see two batches of three messages represented in the output.

- Returned to the portal and selected **Peek from start** again. Noticed that no messages appeared in the queue since they were all retrieved.

### 7. Clean Up Resources
When the resources were no longer needed, used the `az group delete` command in the Azure Cloud Shell to remove the resource group:

```bash
az group delete --name az204-svcbus-rg --no-wait
```

## Result:
- A Service Bus namespace and queue were created.
- A .NET console application was developed to send and receive messages from the queue.
- Messages were successfully sent and retrieved from the queue.
- Resources were cleaned up after the project was completed.
- The project demonstrated the use of Azure Service Bus and .NET for message-based communication.

## Notes:
- Ensure your Azure account is active and has the necessary permissions.
- Follow each step carefully to avoid any errors.
- Use the provided code snippets as a guide to perform the tasks.
```
